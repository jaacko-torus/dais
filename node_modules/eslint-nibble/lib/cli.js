'use strict';

var _nibbler = require('./nibbler');

var _nibbler2 = _interopRequireDefault(_nibbler);

var _formatters = require('./config/formatters');

var fmt = _interopRequireWildcard(_formatters);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _inquirer = require('inquirer');

var _inquirer2 = _interopRequireDefault(_inquirer);

var _eslintFilteredFix = require('eslint-filtered-fix');

var _options = require('./config/options');

var _options2 = _interopRequireDefault(_options);

var _package = require('../package.json');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cli = {

  execute: function execute(args) {
    var currentOptions = void 0,
        files = void 0,
        extensions = void 0,
        config = void 0,
        cache = void 0,
        cacheLocation = void 0,
        allowedRules = void 0,
        warnings = void 0;

    // Parse options
    try {
      currentOptions = _options2.default.parse(args);
      files = currentOptions._;
      extensions = currentOptions.ext;
      config = currentOptions.config;
      cache = currentOptions.cache;
      cacheLocation = currentOptions.cacheLocation;
      allowedRules = currentOptions.rule;
      warnings = currentOptions.warnings;
    } catch (error) {
      console.error(error.message);
      return 1;
    }

    // Decide what to do based on options
    if (currentOptions.version) {
      // Show version from package.json
      console.log('v' + _package.version);
    } else if (currentOptions.help || !files.length) {
      // Show help
      console.log(_options2.default.generateHelp());
    } else {
      var configuration = { extensions: extensions };
      if (config) {
        configuration.configFile = config;
      }
      if (cache) {
        configuration.cache = cache;
      }
      if (cacheLocation) {
        configuration.cacheLocation = cacheLocation;
      }

      _nibbler2.default.configure(configuration);
      var report = _nibbler2.default.nibbleOnFiles(files);
      if (report && (report.errorCount > 0 || report.warningCount > 0)) {
        // Check if there was a fatal error
        var fatalReport = _nibbler2.default.getFatalResults(report);
        if (fatalReport) {
          var errors = _nibbler2.default.getFormattedResults(fatalReport, 'stylish');
          console.log(errors);
          console.error('Fatal error(s) were detected.  Please correct and try again.');
          return 1;
        }

        if (report && !warnings) {
          report = _nibbler2.default.getSeverityResults(report, 2);
        }

        // Calculate stats array
        var stats = _nibbler2.default.getFormattedResults(report, fmt.stats).split('\n');

        // Create an array of choices from the stats
        // (filter removes empty stat at end)
        var results = stats.filter(function (stat) {
          return stat;
        }).map(function (stat) {
          var ruleName = stat.split(':')[0];

          return {
            name: stat,
            value: ruleName,
            short: ruleName
          };
        })
        // Only include allowed rules, if given
        .filter(function (stat) {
          return allowedRules ? allowedRules.includes(stat.value) : true;
        });

        if (!results.length) {
          // If all stats were filtered out due to provided `--rule` optionsâ€¦
          if (allowedRules && allowedRules.length) {
            console.log(_chalk2.default.yellow('\nNo lint failures found for rule(s): ' + allowedRules.join(', ')));
            console.log('Try running again without "--rule"');
            return 0;
          }
          // Or maybe they were filtered out because they were all warnings,
          // and the user didn't want to check warnings
          if (!warnings) {
            console.log(_chalk2.default.green('Great job, no lint rules reporting errors.'));
            return 0;
          }
        }

        // Show summary
        var summary = _nibbler2.default.getFormattedResults(report, fmt.summary);
        console.log(summary);

        // Ask user for the rule to narrow in on
        _inquirer2.default.prompt([{
          name: 'rule',
          type: 'list',
          message: 'Which rule would you like to fix?',
          choices: results,
          pageSize: results.length
        }, {
          name: 'fix',
          type: 'confirm',
          message: 'Would you like to attempt to auto-fix?',
          default: false,
          when: function when(answers) {
            var ruleReport = _nibbler2.default.getRuleResults(report, answers.rule);
            return ruleReport.fixableErrorCount > 0 || ruleReport.fixableWarningCount > 0;
          }
        }, {
          name: 'fixWarnings',
          type: 'confirm',
          message: 'Autofix warnings?',
          default: true,
          when: function when(answers) {
            if (!answers.fix) return false;

            var ruleReport = _nibbler2.default.getRuleResults(report, answers.rule);
            return ruleReport.fixableWarningCount > 0;
          }
        }]).then(function gotInput(answers) {
          // Display detailed error reports
          var ruleName = answers.rule;

          if (answers.fix) {
            var fixOptions = {
              rules: [ruleName],
              warnings: answers.fixWarnings
            };
            var fixedReport = (0, _eslintFilteredFix.fix)(files, fixOptions, configuration);
            var ruleResults = _nibbler2.default.getRuleResults(fixedReport, ruleName);
            if (ruleResults.errorCount > 0 || ruleResults.warningCount > 0) {
              var detailed = _nibbler2.default.getFormattedResults(ruleResults, fmt.detailed);
              console.log(detailed);
            } else {
              console.log(_chalk2.default.green('Fixes applied, ' + ruleName + ' is now passing'));
            }
          } else {
            var _ruleResults = _nibbler2.default.getRuleResults(report, ruleName);
            var _detailed = _nibbler2.default.getFormattedResults(_ruleResults, fmt.detailed);
            console.log(_detailed);
          }
        });

        // No report or not any errors or warnings
      } else {
        console.log(_chalk2.default.green('Great job, all lint rules passed.'));
        return 0;
      }
    }
    return 0;
  }
};

module.exports = cli;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jbGkuanMiXSwibmFtZXMiOlsiZm10IiwiY2xpIiwiZXhlY3V0ZSIsImFyZ3MiLCJjdXJyZW50T3B0aW9ucyIsImZpbGVzIiwiZXh0ZW5zaW9ucyIsImNvbmZpZyIsImNhY2hlIiwiY2FjaGVMb2NhdGlvbiIsImFsbG93ZWRSdWxlcyIsIndhcm5pbmdzIiwib3B0aW9ucyIsInBhcnNlIiwiXyIsImV4dCIsInJ1bGUiLCJlcnJvciIsImNvbnNvbGUiLCJtZXNzYWdlIiwidmVyc2lvbiIsImxvZyIsImhlbHAiLCJsZW5ndGgiLCJnZW5lcmF0ZUhlbHAiLCJjb25maWd1cmF0aW9uIiwiY29uZmlnRmlsZSIsIm5pYmJsZXIiLCJjb25maWd1cmUiLCJyZXBvcnQiLCJuaWJibGVPbkZpbGVzIiwiZXJyb3JDb3VudCIsIndhcm5pbmdDb3VudCIsImZhdGFsUmVwb3J0IiwiZ2V0RmF0YWxSZXN1bHRzIiwiZXJyb3JzIiwiZ2V0Rm9ybWF0dGVkUmVzdWx0cyIsImdldFNldmVyaXR5UmVzdWx0cyIsInN0YXRzIiwic3BsaXQiLCJyZXN1bHRzIiwiZmlsdGVyIiwic3RhdCIsIm1hcCIsInJ1bGVOYW1lIiwibmFtZSIsInZhbHVlIiwic2hvcnQiLCJpbmNsdWRlcyIsImNoYWxrIiwieWVsbG93Iiwiam9pbiIsImdyZWVuIiwic3VtbWFyeSIsImlucXVpcmVyIiwicHJvbXB0IiwidHlwZSIsImNob2ljZXMiLCJwYWdlU2l6ZSIsImRlZmF1bHQiLCJ3aGVuIiwiYW5zd2VycyIsInJ1bGVSZXBvcnQiLCJnZXRSdWxlUmVzdWx0cyIsImZpeGFibGVFcnJvckNvdW50IiwiZml4YWJsZVdhcm5pbmdDb3VudCIsImZpeCIsInRoZW4iLCJnb3RJbnB1dCIsImZpeE9wdGlvbnMiLCJydWxlcyIsImZpeFdhcm5pbmdzIiwiZml4ZWRSZXBvcnQiLCJydWxlUmVzdWx0cyIsImRldGFpbGVkIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7Ozs7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RCxNQWFPO0FBQ0wsZ0JBQUk2QixlQUFjOUMsa0JBQVFvQyxjQUFSLENBQXVCbEMsTUFBdkIsRUFBK0JlLFFBQS9CLENBQWxCO0FBQ0EsZ0JBQUk4QixZQUFXL0Msa0JBQVFTLG1CQUFSLENBQTRCcUMsWUFBNUIsRUFBeUN6RSxJQUFJMEUsUUFBN0MsQ0FBZjtBQUNBeEQsb0JBQVFHLEdBQVIsQ0FBWXFELFNBQVo7QUFDRDtBQUNGLFNBbkRIOztBQXFERjtBQUNDLE9BNUdELE1BNEdPO0FBQ0x4RCxnQkFBUUcsR0FBUixDQUFZNEIsZ0JBQU1HLEtBQU4sQ0FBWSxtQ0FBWixDQUFaO0FBQ0EsZUFBTyxDQUFQO0FBQ0Q7QUFDRjtBQUNELFdBQU8sQ0FBUDtBQUNEO0FBbEtPLENBQVY7O0FBcUtBdUIsT0FBT0MsT0FBUCxHQUFpQjNFLEdBQWpCIiwiZmlsZSI6ImNsaS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IG5pYmJsZXIgZnJvbSAnLi9uaWJibGVyJztcbmltcG9ydCAqIGFzIGZtdCBmcm9tICcuL2NvbmZpZy9mb3JtYXR0ZXJzJztcbmltcG9ydCBjaGFsayBmcm9tICdjaGFsayc7XG5pbXBvcnQgaW5xdWlyZXIgZnJvbSAnaW5xdWlyZXInO1xuaW1wb3J0IHsgZml4IH0gZnJvbSAnZXNsaW50LWZpbHRlcmVkLWZpeCc7XG5pbXBvcnQgb3B0aW9ucyBmcm9tICcuL2NvbmZpZy9vcHRpb25zJztcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tICcuLi9wYWNrYWdlLmpzb24nO1xuXG5sZXQgY2xpID0ge1xuXG4gIGV4ZWN1dGU6IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgbGV0IGN1cnJlbnRPcHRpb25zLFxuICAgICAgICBmaWxlcyxcbiAgICAgICAgZXh0ZW5zaW9ucyxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICBjYWNoZSxcbiAgICAgICAgY2FjaGVMb2NhdGlvbixcbiAgICAgICAgYWxsb3dlZFJ1bGVzLFxuICAgICAgICB3YXJuaW5ncztcblxuICAgIC8vIFBhcnNlIG9wdGlvbnNcbiAgICB0cnkge1xuICAgICAgY3VycmVudE9wdGlvbnMgPSBvcHRpb25zLnBhcnNlKGFyZ3MpO1xuICAgICAgZmlsZXMgPSBjdXJyZW50T3B0aW9ucy5fO1xuICAgICAgZXh0ZW5zaW9ucyA9IGN1cnJlbnRPcHRpb25zLmV4dDtcbiAgICAgIGNvbmZpZyA9IGN1cnJlbnRPcHRpb25zLmNvbmZpZztcbiAgICAgIGNhY2hlID0gY3VycmVudE9wdGlvbnMuY2FjaGU7XG4gICAgICBjYWNoZUxvY2F0aW9uID0gY3VycmVudE9wdGlvbnMuY2FjaGVMb2NhdGlvbjtcbiAgICAgIGFsbG93ZWRSdWxlcyA9IGN1cnJlbnRPcHRpb25zLnJ1bGU7XG4gICAgICB3YXJuaW5ncyA9IGN1cnJlbnRPcHRpb25zLndhcm5pbmdzO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuXG4gICAgLy8gRGVjaWRlIHdoYXQgdG8gZG8gYmFzZWQgb24gb3B0aW9uc1xuICAgIGlmIChjdXJyZW50T3B0aW9ucy52ZXJzaW9uKSB7XG4gICAgICAvLyBTaG93IHZlcnNpb24gZnJvbSBwYWNrYWdlLmpzb25cbiAgICAgIGNvbnNvbGUubG9nKCd2JyArIHZlcnNpb24pO1xuICAgIH0gZWxzZSBpZiAoY3VycmVudE9wdGlvbnMuaGVscCB8fCAoIWZpbGVzLmxlbmd0aCkpIHtcbiAgICAgIC8vIFNob3cgaGVscFxuICAgICAgY29uc29sZS5sb2cob3B0aW9ucy5nZW5lcmF0ZUhlbHAoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGNvbmZpZ3VyYXRpb24gPSB7IGV4dGVuc2lvbnMgfTtcbiAgICAgIGlmIChjb25maWcpIHtcbiAgICAgICAgY29uZmlndXJhdGlvbi5jb25maWdGaWxlID0gY29uZmlnO1xuICAgICAgfVxuICAgICAgaWYgKGNhY2hlKSB7XG4gICAgICAgIGNvbmZpZ3VyYXRpb24uY2FjaGUgPSBjYWNoZTtcbiAgICAgIH1cbiAgICAgIGlmIChjYWNoZUxvY2F0aW9uKSB7XG4gICAgICAgIGNvbmZpZ3VyYXRpb24uY2FjaGVMb2NhdGlvbiA9IGNhY2hlTG9jYXRpb247XG4gICAgICB9XG5cbiAgICAgIG5pYmJsZXIuY29uZmlndXJlKGNvbmZpZ3VyYXRpb24pO1xuICAgICAgbGV0IHJlcG9ydCA9IG5pYmJsZXIubmliYmxlT25GaWxlcyhmaWxlcyk7XG4gICAgICBpZiAocmVwb3J0ICYmIChyZXBvcnQuZXJyb3JDb3VudCA+IDAgfHwgcmVwb3J0Lndhcm5pbmdDb3VudCA+IDApKSB7XG4gICAgICAgIC8vIENoZWNrIGlmIHRoZXJlIHdhcyBhIGZhdGFsIGVycm9yXG4gICAgICAgIGxldCBmYXRhbFJlcG9ydCA9IG5pYmJsZXIuZ2V0RmF0YWxSZXN1bHRzKHJlcG9ydCk7XG4gICAgICAgIGlmIChmYXRhbFJlcG9ydCkge1xuICAgICAgICAgIGxldCBlcnJvcnMgPSBuaWJibGVyLmdldEZvcm1hdHRlZFJlc3VsdHMoZmF0YWxSZXBvcnQsICdzdHlsaXNoJyk7XG4gICAgICAgICAgY29uc29sZS5sb2coZXJyb3JzKTtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdGYXRhbCBlcnJvcihzKSB3ZXJlIGRldGVjdGVkLiAgUGxlYXNlIGNvcnJlY3QgYW5kIHRyeSBhZ2Fpbi4nKTtcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZXBvcnQgJiYgIXdhcm5pbmdzKSB7XG4gICAgICAgICAgcmVwb3J0ID0gbmliYmxlci5nZXRTZXZlcml0eVJlc3VsdHMocmVwb3J0LCAyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENhbGN1bGF0ZSBzdGF0cyBhcnJheVxuICAgICAgICBsZXQgc3RhdHMgPSBuaWJibGVyLmdldEZvcm1hdHRlZFJlc3VsdHMocmVwb3J0LCBmbXQuc3RhdHMpXG4gICAgICAgICAgLnNwbGl0KCdcXG4nKTtcblxuICAgICAgICAvLyBDcmVhdGUgYW4gYXJyYXkgb2YgY2hvaWNlcyBmcm9tIHRoZSBzdGF0c1xuICAgICAgICAvLyAoZmlsdGVyIHJlbW92ZXMgZW1wdHkgc3RhdCBhdCBlbmQpXG4gICAgICAgIGNvbnN0IHJlc3VsdHMgPSBzdGF0c1xuICAgICAgICAgIC5maWx0ZXIoc3RhdCA9PiBzdGF0KVxuICAgICAgICAgIC5tYXAoc3RhdCA9PiB7XG4gICAgICAgICAgICBjb25zdCBydWxlTmFtZSA9IHN0YXQuc3BsaXQoJzonKVswXTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgbmFtZSA6IHN0YXQsXG4gICAgICAgICAgICAgIHZhbHVlOiBydWxlTmFtZSxcbiAgICAgICAgICAgICAgc2hvcnQ6IHJ1bGVOYW1lXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLy8gT25seSBpbmNsdWRlIGFsbG93ZWQgcnVsZXMsIGlmIGdpdmVuXG4gICAgICAgICAgLmZpbHRlcihzdGF0ID0+IGFsbG93ZWRSdWxlcyA/IGFsbG93ZWRSdWxlcy5pbmNsdWRlcyhzdGF0LnZhbHVlKSA6IHRydWUpO1xuXG4gICAgICAgIGlmICghcmVzdWx0cy5sZW5ndGgpIHtcbiAgICAgICAgICAvLyBJZiBhbGwgc3RhdHMgd2VyZSBmaWx0ZXJlZCBvdXQgZHVlIHRvIHByb3ZpZGVkIGAtLXJ1bGVgIG9wdGlvbnPigKZcbiAgICAgICAgICBpZiAoYWxsb3dlZFJ1bGVzICYmIGFsbG93ZWRSdWxlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGNoYWxrLnllbGxvdyhgXFxuTm8gbGludCBmYWlsdXJlcyBmb3VuZCBmb3IgcnVsZShzKTogJHthbGxvd2VkUnVsZXMuam9pbignLCAnKX1gKSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnVHJ5IHJ1bm5pbmcgYWdhaW4gd2l0aG91dCBcIi0tcnVsZVwiJyk7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gT3IgbWF5YmUgdGhleSB3ZXJlIGZpbHRlcmVkIG91dCBiZWNhdXNlIHRoZXkgd2VyZSBhbGwgd2FybmluZ3MsXG4gICAgICAgICAgLy8gYW5kIHRoZSB1c2VyIGRpZG4ndCB3YW50IHRvIGNoZWNrIHdhcm5pbmdzXG4gICAgICAgICAgaWYgKCF3YXJuaW5ncykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coY2hhbGsuZ3JlZW4oJ0dyZWF0IGpvYiwgbm8gbGludCBydWxlcyByZXBvcnRpbmcgZXJyb3JzLicpKTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNob3cgc3VtbWFyeVxuICAgICAgICBsZXQgc3VtbWFyeSA9IG5pYmJsZXIuZ2V0Rm9ybWF0dGVkUmVzdWx0cyhyZXBvcnQsIGZtdC5zdW1tYXJ5KTtcbiAgICAgICAgY29uc29sZS5sb2coc3VtbWFyeSk7XG5cbiAgICAgICAgLy8gQXNrIHVzZXIgZm9yIHRoZSBydWxlIHRvIG5hcnJvdyBpbiBvblxuICAgICAgICBpbnF1aXJlci5wcm9tcHQoW3tcbiAgICAgICAgICBuYW1lICAgIDogJ3J1bGUnLFxuICAgICAgICAgIHR5cGUgICAgOiAnbGlzdCcsXG4gICAgICAgICAgbWVzc2FnZSA6ICdXaGljaCBydWxlIHdvdWxkIHlvdSBsaWtlIHRvIGZpeD8nLFxuICAgICAgICAgIGNob2ljZXMgOiByZXN1bHRzLFxuICAgICAgICAgIHBhZ2VTaXplOiByZXN1bHRzLmxlbmd0aFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZSAgIDogJ2ZpeCcsXG4gICAgICAgICAgdHlwZSAgIDogJ2NvbmZpcm0nLFxuICAgICAgICAgIG1lc3NhZ2U6ICdXb3VsZCB5b3UgbGlrZSB0byBhdHRlbXB0IHRvIGF1dG8tZml4PycsXG4gICAgICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgICAgICAgd2hlbihhbnN3ZXJzKSB7XG4gICAgICAgICAgICBsZXQgcnVsZVJlcG9ydCA9IG5pYmJsZXIuZ2V0UnVsZVJlc3VsdHMocmVwb3J0LCBhbnN3ZXJzLnJ1bGUpO1xuICAgICAgICAgICAgcmV0dXJuIHJ1bGVSZXBvcnQuZml4YWJsZUVycm9yQ291bnQgPiAwIHx8IHJ1bGVSZXBvcnQuZml4YWJsZVdhcm5pbmdDb3VudCA+IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZSAgIDogJ2ZpeFdhcm5pbmdzJyxcbiAgICAgICAgICB0eXBlICAgOiAnY29uZmlybScsXG4gICAgICAgICAgbWVzc2FnZTogJ0F1dG9maXggd2FybmluZ3M/JyxcbiAgICAgICAgICBkZWZhdWx0OiB0cnVlLFxuICAgICAgICAgIHdoZW4oYW5zd2Vycykge1xuICAgICAgICAgICAgaWYgKCFhbnN3ZXJzLmZpeCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgICAgICBsZXQgcnVsZVJlcG9ydCA9IG5pYmJsZXIuZ2V0UnVsZVJlc3VsdHMocmVwb3J0LCBhbnN3ZXJzLnJ1bGUpO1xuICAgICAgICAgICAgcmV0dXJuIHJ1bGVSZXBvcnQuZml4YWJsZVdhcm5pbmdDb3VudCA+IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XSlcbiAgICAgICAgICAudGhlbihmdW5jdGlvbiBnb3RJbnB1dChhbnN3ZXJzKSB7XG4gICAgICAgICAgICAvLyBEaXNwbGF5IGRldGFpbGVkIGVycm9yIHJlcG9ydHNcbiAgICAgICAgICAgIGxldCBydWxlTmFtZSA9IGFuc3dlcnMucnVsZTtcblxuICAgICAgICAgICAgaWYgKGFuc3dlcnMuZml4KSB7XG4gICAgICAgICAgICAgIGNvbnN0IGZpeE9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgcnVsZXMgICA6IFtydWxlTmFtZV0sXG4gICAgICAgICAgICAgICAgd2FybmluZ3M6IGFuc3dlcnMuZml4V2FybmluZ3NcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgY29uc3QgZml4ZWRSZXBvcnQgPSBmaXgoZmlsZXMsIGZpeE9wdGlvbnMsIGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgICAgICBsZXQgcnVsZVJlc3VsdHMgPSBuaWJibGVyLmdldFJ1bGVSZXN1bHRzKGZpeGVkUmVwb3J0LCBydWxlTmFtZSk7XG4gICAgICAgICAgICAgIGlmIChydWxlUmVzdWx0cy5lcnJvckNvdW50ID4gMCB8fCBydWxlUmVzdWx0cy53YXJuaW5nQ291bnQgPiAwKSB7XG4gICAgICAgICAgICAgICAgbGV0IGRldGFpbGVkID0gbmliYmxlci5nZXRGb3JtYXR0ZWRSZXN1bHRzKHJ1bGVSZXN1bHRzLCBmbXQuZGV0YWlsZWQpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRldGFpbGVkKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhjaGFsay5ncmVlbihgRml4ZXMgYXBwbGllZCwgJHtydWxlTmFtZX0gaXMgbm93IHBhc3NpbmdgKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGxldCBydWxlUmVzdWx0cyA9IG5pYmJsZXIuZ2V0UnVsZVJlc3VsdHMocmVwb3J0LCBydWxlTmFtZSk7XG4gICAgICAgICAgICAgIGxldCBkZXRhaWxlZCA9IG5pYmJsZXIuZ2V0Rm9ybWF0dGVkUmVzdWx0cyhydWxlUmVzdWx0cywgZm10LmRldGFpbGVkKTtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coZGV0YWlsZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAvLyBObyByZXBvcnQgb3Igbm90IGFueSBlcnJvcnMgb3Igd2FybmluZ3NcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGNoYWxrLmdyZWVuKCdHcmVhdCBqb2IsIGFsbCBsaW50IHJ1bGVzIHBhc3NlZC4nKSk7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBjbGk7XG4iXX0=