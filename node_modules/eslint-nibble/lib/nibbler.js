'use strict';

var _require = require('eslint'),
    CLIEngine = _require.CLIEngine;

var cli = new CLIEngine({});

function getCounts(messages) {
  var counts = messages.reduce(function (result, message) {
    if (message.severity === 1) {
      result.warningCount++;
      if (message.fix) {
        result.fixableWarningCount++;
      }
    }
    if (message.severity === 2) {
      result.errorCount++;
      if (message.fix) {
        result.fixableErrorCount++;
      }
    }
    return result;
  }, { errorCount: 0, warningCount: 0, fixableErrorCount: 0, fixableWarningCount: 0 });

  return counts;
}

/**
 * Get only the results wanted from a report
 * @param  {object} report   The report to filter
 * @param  {string} msgKey   Name of the message property on which to filter
 * @param  {object} options  Options to use for comparison
 * @return {object}          Report object which only contains messages that pass filter
 */
function filterResults(report, msgKey, options) {
  var newResults = {};
  var totalErrors = 0;
  var totalWarnings = 0;
  var totalFixableErrors = 0;
  var totalFixableWarnings = 0;
  newResults.results = report.results.map(function (result) {
    var filteredMessages = result.messages.filter(function (msg) {
      if (options.present) {
        return msg[msgKey];
      }
      if (options.compareVal) {
        return msg[msgKey] === options.compareVal;
      }
      return false;
    });
    if (filteredMessages) {
      var _getCounts = getCounts(filteredMessages),
          errorCount = _getCounts.errorCount,
          warningCount = _getCounts.warningCount,
          fixableErrorCount = _getCounts.fixableErrorCount,
          fixableWarningCount = _getCounts.fixableWarningCount;

      totalErrors += errorCount;
      totalWarnings += warningCount;
      totalFixableErrors += fixableErrorCount;
      totalFixableWarnings += fixableWarningCount;
      // fixableErrors += fixableErrors;
      return {
        filePath: result.filePath,
        messages: filteredMessages,

        errorCount: errorCount,
        warningCount: warningCount,
        fixableErrorCount: fixableErrorCount,
        fixableWarningCount: fixableWarningCount
      };
    }
    return {};
  });
  newResults.errorCount = totalErrors;
  newResults.warningCount = totalWarnings;
  newResults.fixableErrorCount = totalFixableErrors;
  newResults.fixableWarningCount = totalFixableWarnings;
  return newResults;
}

module.exports = {
  configure: function configure(configuration) {
    cli = new CLIEngine(configuration);
  },
  nibbleOnFiles: function nibbleOnFiles(files) {
    var report = cli.executeOnFiles(files);
    return report;
  },
  getFatalResults: function getFatalResults(report) {
    var fatalResults = filterResults(report, 'fatal', { present: true });
    if (fatalResults.errorCount > 0) {
      return fatalResults;
    }
    return undefined;
  },
  getFormattedResults: function getFormattedResults(report, fmt) {
    var formatter = cli.getFormatter(fmt);
    return formatter(report.results);
  },
  getRuleResults: function getRuleResults(report, ruleName) {
    var ruleResults = filterResults(report, 'ruleId', { compareVal: ruleName });
    return ruleResults;
  },
  getSeverityResults: function getSeverityResults(report, severity) {
    var ruleResults = filterResults(report, 'severity', { compareVal: severity });
    return ruleResults;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,